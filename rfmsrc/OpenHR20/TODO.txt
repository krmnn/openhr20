HR20 - Mods to support RS-485
=============================

TODO:
1. Check that serial comms doesn't interfere with control

2. Check sleep mode handling (although less relevant if unit externally powered)

3. Should we store auto/manual mode in EEPROM, and select on power up? (Probably device will be powered
	down sufficiently infrequently that its no big deal either way)

4. With COM_RECEIVE_ACTIVE undefined ('original' code) What if glitch on RxD, sufficient to trigger level 
detection and start the UART, but not enough to start receiving a character?


Testing:
	Ctt - works - visible change on display shown if press middle button, with correlation
	Q returns appropriate values - can be polled 25 times/second!
	M sets appropriate modes

	Operation as a thermostatic valve not checked!


Main Changes
============
1. If compiled with option COM_RS485:
	 introduces two protocols which include simple error-checking (see later)
	 Controls line PE2 to act as /RTS (enable transmit buffer when low) - precludes use of hardware window detection
	 The 'command line' protocol is currently still enabled, but can be disabled with a simple code change

	Serial address is stored in EEPROM location 0x2c - its an offset 1..63 within the protocol used.

Above additions support use with a 2-wire or 4-wire RS-485 transceiver (such as MAX3072 or MAX3070)


2. Additional options to 'M' command; valid parameter values as follows (new ones asterisked):
		00 - manual (temperature control)
		01 - auto (temperature control)
		7f* - trigger calibration
		f0* – window mode auto
		f1* – window mode remote controlled
		fc* – window open (only if window mode remote controlled)
		fd (CTL_CLOSE_WINDOW_FORCE) – signal that window closed (any mode)
		fe (CTL_CHANGE_MODE_REWOKE) – 
		ff (CTL_CHANGE_MODE) - 

(may be slight variations in how the original facilities are now processed)
This allows the window open/closed status to be set remotely


3. New command 'Ctt' sets the ambient temperature to be used, as measured elsewhere. Units 0.5 deg, hex encoding
A timer invalidates this temperature and reverts to the internal sensor after about 15 minutes if 'remote' temperature isn't refreshed


4. New status poll 'Q'; returns Qmwsddtaacvvh where:
	- m = '0' for manual mode, '1' for auto mode
	- w = '0' for window open control via software, '1' for control via remotely set flag
	- s - window status - '0' = closed, '1' = open
	- dd - demand temperature in 0.5 degree steps, hex-encoded
	- t - '0' if ambient temperature from valve sensor; '1' if set via serial
	- aa - ambient temperature (from local or remote source as configured)
	- c  - calibration status. '0' = idle/OK; '1..3' = 'in progress'. Other possible values '.' and '/'
	- vv - valve position - hex-encoded
	- h - flag indicating whether heat required. '0' for no heat, '1' for heat

(The intent of this poll is that it tells you everything you will need to know on a frequent basis in a single, brief, transaction)


5. EEPROM layout extended and modified slightly to maintain consistency across various compilation options.


6. Option DEBUG_ENABLE controls whether OCD enabled (disable for lowest power consumption)


7. Display during motor calibration changed from 'Adn' to 'CAn' (more intuitive to me as English speaker)


8. New compile-time flag COM_RECEIVE_ACTIVE - when defined this leaves the USART receiver permanently enabled.
(Needed to give reliable comms; otherwise often doesn't respond while motor moving, since edge detect interrupt on RxD not triggered soon enough)


9. New compile-time flag COM_FAST_BAUD_CLOCK - when defined, uses 16x baud rate clock for USART (rather than 8x)


(These changes leave memory very full - easy to overflow program space on ATMega169 if too many options enabled)


Serial protocol options
=======================
These serial protocols include an address character and a checksum, allowing multiple units to be connected, and providing some confidence of data integrity.
They (and the added messages) are orientated more towards communication with a computer than direct communication with a human.

As coded, these protocols are active if compiled with the COM_485 option.

In RS-232 mode, the unit will also respond to a simple ASCII string terminated with carriage return.

The unit automatically determines which protocol is being used, and responds in kind.

Addresses are stored internally as an offset from the 'base address' (lowest valid address) of the currently active protocol.

The 'global' or wildcard address (offset zero) is intended to be used when a single unit is connected, purely to start communication with a unit whose address is unknown.
The unit will respond with a message which includes its allocated address.

The 'Data' field mentioned below is the ASCII string which would be sent in RS-232 mode, excluding the terminating CR.

IBM
---
Send:
	STX
	Address
	Data
	ETX
	checksum

Address - starts at '0' (= global or wildcard)
Data - at least 1 character - must all be >= 0x20
checksum - exclusive-OR of all characters STX..ETX

Response starts with ACK instead of STX (could start with NAK to indicate error, but not used here)

Returns a single error letter if appropriate:
	a - unrecognised command letter
	b - invalid or missing parameter

(Note - error checking is far from perfect!)


ASCII Protocol
--------------
Note: ALL characters are 'printable', in the range 0x20..0x7f
Send/receive:
	'{'
	Address
	Data
	'}'
	checksum

Address - starts at '@' (= global or wildcard)
Data - at least 1 character - must all be >= 0x20
checksum - for all characters '{'.. '}' subtract 0x20 from each, and add together modulo-95. Add 0x20 to the result to get the checksum character.
Note: '{' is a valid checksum character, so any receiver needs to track complete messages, even if not addressed, to avoid the possibility of seeing a false 'start of message' character



Timers used:
===========
RTC Timer - timer 2 - 1 second tick by direct division of 32768Hz clock - used on valves. Runs during sleep
Timer 1 - 10ms tick (16-bit) - used on master controller. Now used for serial comms - enabled when required
Timer 0 - Motor timer
Wireless timer - uses RTC?


rtc.c - uses software TOD clock. Handles DST - last Sunday in October/last Sunday in March.
rfm.c - handles RFM12 module when supported

If all keys pressed on power up, reloads EEPROM with defaults.

Edge detection in motor.c enables serial receive

Oscillator calibration in rtc.c 

MASTER_CONFIG_H determines which timer is used for system functions. When defined, its a master controller
	- if defined, uses timer 1 with 100ms tick
	- if undefined, uses timer 2 with 1-second tick
	- affects eeprom.c, rs232_485_hw.c, rtc.c

Has 'high resolution' timers handled off the 10ms tick.
Has 'low resolution' timers handled off 1second tick.


Temperature Control
=========================
Temperatures stored to 0.5 degrees.
Normally measured via task in adc.c


CTL_mode_window set as counter; decremented in main loop once/minute until zero; then PID_force_update = 0;

Variables in controller.c (assuming software window open detection)
uint8_t CTL_temp_wanted=0;				// actual desired temperature
uint8_t CTL_temp_wanted_last=0xff;		// desired temperature value used for last PID control
uint8_t CTL_temp_auto=0;				// demand temperature when in auto mode
bool CTL_mode_auto=true;				// operating mode
uint8_t CTL_mode_window = 0;			// open window (0=closed, >0 open-timer)
uint16_t CTL_open_window_timeout;


RTC_ActualTimerTemperature(!(CTL_temp_auto==0));  Function returns demand temperature appropriate to time of day
uint8_t RTC_ActualTimerTemperature(bool exact)  (in rtc.c)



Notes
=====
1. ADC power_up, power_down macros changed to only affect the ADC power control bit (was disabling Timer 1, which is independent)

2. Smallest valve position seen is 0x1e - configurable in EEPROM

3. CTL_error has flags for various errors


Menu Modes
==========
menu_startup			Turn on all display segments at startup
menu_version			Display software version briefly on startup - go to set year if needed
menu_preset_temp0*
menu_preset_temp1* 
menu_preset_temp2* 
menu_preset_temp3* 
// home screens
menu_home_no_alter
menu_home				Cycle round all the menu_homex screens when middle button pressed
menu_home2
menu_home3
menu_home4
#if MENU_SHOW_BATTERY
menu_home5
#endif
// lock message
menu_lock
// service menu
menu_service1
menu_service2
menu_service_watch

menu_set_year*			Set year
menu_set_month*			Set month
menu_set_day*			Set day of month
menu_set_hour*			Set time - hour
menu_set_minute*		Set time - minute

// timers setting
menu_set_timmer_dow_start*
menu_set_timmer_dow*
menu_set_timmer*


* Options only available if local setting of values permitted (if !REMOTE_SETTING_ONLY)
